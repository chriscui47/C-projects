#include <stdio.h>
#include <ctype.h>
#include <string.h>
//Christopher Cui StudentID: 260867703

//check if th#include <stdio.h>
#include <stdlib.h>

struct PERSON{
    int id;
    char name[10];
    int age;
    float gpa;
    int status;
};
struct PERSON people[100];
struct PERSON newList[99];
struct PERSON new;
int counter=0;

void showFile(FILE* p){
	//create a buffer
    char buffer[1000];
    char *token;

puts("showingfile");

    for(int i=0; fgets(buffer,100,p)!= NULL;i++){
        printf("Record %d:",i+1);
	//set the strtoken to the first element.
        token = strtok(buffer, ",");
        int tok = atoi(token);
        people[i].id=tok;
        printf("ID=%-3d ", people[i].id);
        // Keep printing tokens while one of the
        // delimiters present in str[].
	// MOVE the token to the next element in the string
        token = strtok(NULL,",");
	//copy the string element in buffer to the people attribute. repeat for all other elements.
        strcpy(people[i].name, token);
        printf("NAME=%-10s ",people[i].name);

        token = strtok(NULL,",");
        tok = atoi(token);
        people[i].age = tok;
        printf("AGE=%-3d ",people[i].age);

        token = strtok(NULL,",");
        float GPAattr;
         GPAattr= atof(token);
        people[i].gpa= GPAattr;
        printf("GPA=%4.2f  \n",people[i].gpa);

	//set status for all people to 1
        people[i].status=1;
	//incermenet the counter
	counter++;
    }
    exit(0);

}



void deleteRecord(FILE* p, int chooseID){

	    char buffer[200];
 	   char *token;

//THE FOLLOWING LINES are used to initialize the person array.
    for(int i=0; fgets(buffer,100,p) !=NULL;i++){

	//fputs(buffer,tmp2);
        token =strtok(buffer,",");
        int tok = atoi(token);
        people[i].id=tok;

        // Keep printing tokens
        // delimiters present in ","
	// move the string token to the next parameter, and set it to NAME, then age ETC.
        token = strtok(NULL,",");
        strcpy(people[i].name, token);


        token = strtok(NULL,",");
	//parse the string data to int
        tok = atoi(token);
        people[i].age = tok;

        token = strtok(NULL,",");
        float GPAattr;
         GPAattr= atof(token);
        people[i].gpa= GPAattr;

        people[i].status=1;
        counter++;
    }

    //check if the person matches the name to be removed
	int nameMatch =0;
	for(int i =0;i<counter;i++){
		if(people[i].id==chooseID){
			people[i].status=0;
			printf("removing %s ID:%d",people[i].name,people[i].id);
			nameMatch=1;
		}
	}
	if (!nameMatch){
		puts("Sorry, that user was not found. Nothing was deleted");
		exit(0);
	}

	system("touch database.tmp");

	//create pointer to the database.tmp
	FILE * outputfile;
	//open the database.tmp  to write the new list of peopel to
	outputfile=fopen("database.tmp","w");
	 if (outputfile==NULL){
                puts("error opening database.tmp file. null file");
                exit(0);
        }

	for (int i=0;i<counter;i++){
		if(people[i].status==1){
			newList[i]=people[i];
			//write each attribute of each person into the new tmp file
			fprintf(outputfile,"%d,",newList[i].id);
                        fprintf(outputfile,"%s,",newList[i].name);
                        fprintf(outputfile,"%d,",newList[i].age);
                        fprintf(outputfile,"%4.2f\n",newList[i].gpa);

		}

	}fclose(outputfile);
	//create a new tmp file and rename the tmp to new csv
	system("rm database.csv");
	system("mv database.tmp database.csv");



}

void appendRec(int id, char name[12], int age, float gpa,FILE* p){
	//initialize arguments to attirbutes of struct new
	new.status=1;
	new.id=id;
	strcpy(new.name,name);
	new.age=age;
	new.gpa=gpa;

       //write attirbutes to database
       fprintf(p,"%d,",new.id);
        fprintf(p,"%s,",new.name);
        fprintf(p,"%d,",new.age);
        fprintf(p,"%4.2f",new.gpa);
        printf("successfully appended %s",new.name);
     	fprintf(p,"\n");

}

int main( int argc, const char* argv[] )
{
	char command[30];
        if (argc <2) {
                printf("You did not provide any command line arguments. Please enter: ./database CMD OPT1 OPt2 OPT3 OPT4");
                exit(0);
	}

	strcpy(command,argv[1]);
	for (int i =0;command[i]!='\0';i++){
		if (toupper(command[i])!=command[i]){
			puts("The command must be in all caps. Please run the program again");
			exit(0);
		}
	}
//SHOW DELETE ADD
	char *a1 = "SHOW";
	char *a2 = "DELETE";
	char *a3 = "ADD";
	if( (strcmp(argv[1],a1)&&strcmp(argv[1],a2)&&strcmp(argv[1],a3))){
		puts("The command you requested is invalid. Please select from one of these: SHOW, DELETE, ADD");
		exit(0);
	}



	//run the display file function
	if (!(strcmp(argv[1],a1))){

	        FILE* p=fopen("database.csv","rt");
		if (p==NULL){
			puts("File empty. exiting");
			fclose(p);
			exit(0);
		}
			else{
				puts("showfileactivated");
				showFile(p);
				fclose(p);
			}
	}
	//run the delete RECORD funciton
	int chooseID;
	if (!(strcmp(argv[1],a2))){

		//checks if there is an OP1 present
			if (argc<3){
				puts("Name of the record to delete is missing");
				exit(0);

			}

			//set the name to search for to be OPT1
			chooseID=atoi(argv[2]);

			FILE *p=fopen("database.csv","rt");
			if (p==NULL){
				printf("couldnt open file");
				exit(0);
			}
			deleteRecord(p,chooseID);
			fclose(p);



	}
	//run function addRecord
	int opt1;
	char opt2[12];
	int  opt3;
	float opt4;
	if (!strcmp(argv[1],a3)){
		if (argc<6){
			puts("missing Id, Name, AGE, and GPA arguments.");
		}
		else{
			FILE *p=fopen("database.csv","at");

			opt1 = atoi(argv[2]);
			printf("%d THIS IS IT",opt1);
			strcpy(opt2,argv[3]);
			opt3=atoi(argv[4]);
			opt4=atof(argv[5]);

			appendRec(opt1,opt2,opt3,opt4,p);
			fclose(p);

		}
	}

}
